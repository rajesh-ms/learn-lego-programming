name: Release Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AZURE_WEBAPP_NAME: learn-lego-app
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Run unit tests
      run: npm run test
    
    - name: Run educational content tests
      run: npm run test:content

  determine-version:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.version.outputs.changelog }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate version and changelog
      id: version
      run: |
        # Install semantic-release dependencies
        npm install --save-dev semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github
        
        # Run semantic-release dry run to get next version
        npx semantic-release --dry-run > release-output.txt 2>&1 || true
        
        # Extract version from output
        VERSION=$(grep "The next release version is" release-output.txt | sed 's/.*The next release version is //' || echo "")
        
        if [ -z "$VERSION" ]; then
          # Fallback: generate patch version based on commit count
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          PATCH=$(git rev-list --count HEAD)
          VERSION="$CURRENT_VERSION-build.$PATCH"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate changelog
        CHANGELOG=$(git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")..HEAD 2>/dev/null || echo "- Initial release")
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  build-staging:
    runs-on: ubuntu-latest
    needs: [test, determine-version]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Update version in package.json
      run: |
        npm version ${{ needs.determine-version.outputs.version }} --no-git-tag-version
    
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        NEXT_PUBLIC_VERSION: ${{ needs.determine-version.outputs.version }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-staging-${{ needs.determine-version.outputs.version }}
        path: |
          .next/
          package.json
          package-lock.json
        retention-days: 7

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-staging, determine-version]
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-staging-${{ needs.determine-version.outputs.version }}
    
    - name: Deploy to Azure Web App (Staging)
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}-staging
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING }}
        package: .
    
    - name: Run smoke tests on staging
      run: |
        sleep 30 # Wait for deployment
        curl -f https://${{ env.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net/api/health || exit 1
        echo "Staging deployment health check passed"

  create-release:
    runs-on: ubuntu-latest
    needs: [deploy-staging, determine-version]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.determine-version.outputs.version }}
        release_name: Release v${{ needs.determine-version.outputs.version }}
        body: |
          ## Changes in this Release
          ${{ needs.determine-version.outputs.changelog }}
          
          ## Deployment Information
          - Version: ${{ needs.determine-version.outputs.version }}
          - Build Date: ${{ github.event.head_commit.timestamp }}
          - Commit: ${{ github.sha }}
          - Staging URL: https://${{ env.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net
        draft: false
        prerelease: false

  build-production:
    runs-on: ubuntu-latest
    needs: [create-release, determine-version]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Update version in package.json
      run: |
        npm version ${{ needs.determine-version.outputs.version }} --no-git-tag-version
    
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        NEXT_PUBLIC_VERSION: ${{ needs.determine-version.outputs.version }}
    
    - name: Upload production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-production-${{ needs.determine-version.outputs.version }}
        path: |
          .next/
          package.json
          package-lock.json
        retention-days: 30

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-production, determine-version]
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download production artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-production-${{ needs.determine-version.outputs.version }}
    
    - name: Deploy to Azure Web App (Production)
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_PRODUCTION }}
        package: .
    
    - name: Run production health checks
      run: |
        sleep 60 # Wait for production deployment
        curl -f https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health || exit 1
        curl -f https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/metrics || exit 1
        echo "Production deployment health checks passed"
    
    - name: Send deployment notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          üöÄ LEGO Learning Platform v${{ needs.determine-version.outputs.version }} deployed to production!
          
          üìä Deployment Status: ${{ job.status }}
          üîó Production URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net
          üìù Release Notes: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.determine-version.outputs.version }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
